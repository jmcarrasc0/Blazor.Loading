@inject LoadingServices loadingService

<style>

    .loading-container {
        z-index: 5000;
        width: 100vw;
        height: 100vh;
    }

    .loading-container i {
        color: white;
    }

    .loading-icon {
        position: fixed;
        top: 30%;
        left: 50%;
        margin-left: -55px; /* Negative half of width. */
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        background: rgba(0,0,0,0.8);
        z-index: 4000;
        width: 100%;
        height: 100%;
    }

    @@-webkit-keyframes infiniteRotate {
        0% { -webkit-transform: rotate(0deg); }
        100% { -webkit-transform: rotate(360deg); }
    }
    /* Standard syntax */
    @@keyframes infinite-rotate {
        0% { -webkit-transform: rotate(0deg); }
        100% { -webkit-transform: rotate(360deg); }
    }
    .spin {
        -webkit-animation: infiniteRotate 2s linear infinite; /* Safari */
        animation: infiniteRotate 2s linear infinite;
    }

</style>

@if (IsVisible)
{

    <div class="loading-overlay">
        <div class="loading-container">
            <i width="100" height="100" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="circle-notch" class="@icon spin loading-icon"></i>
          </div>
    </div>
}

@code{


    protected bool IsVisible { get; set; }

    [Parameter] public string icon { get; set; }

    protected override void OnInitialized()
    {
        loadingService.OnShow += ShowLoadingSpinner;
        loadingService.OnHide += HideLoadingSpinner;
    }

    public void ShowLoadingSpinner()
    {
        IsVisible = true;
        if (IsVisible == true)
            StateHasChanged();
    }

    async public void HideLoadingSpinner()
    {
        IsVisible = false;
        await Task.Delay(500);

        if (IsVisible == false)
            StateHasChanged();
    }



}